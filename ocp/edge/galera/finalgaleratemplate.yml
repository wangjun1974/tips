---
apiVersion: template.openshift.io/v1
kind: Template
message: |-
  The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

  For more information about using this template, including OpenShift considerations, see https://github.com/tonyli71/mariadb-galera/blob/master/README.md.

metadata:
  annotations:
    description: An example MariaDB Galera cluster persistent (ODF). For more
      information about using this template, including OpenShift considerations, see
      https://github.com/tonyli71/mariadb-galera/blob/master/README.md.
    iconClass: icon-mariadb
    openshift.io/display-name: mariadb-galera Configurable StorageClass
    openshift.io/documentation-url: https://github.com/tonyli71/mariadb-galera
    openshift.io/long-description: This template defines resources needed to develop
      a mariadb-galera application, including a build configuration, application deployment
      configuration, and database deployment configuration.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    samples.operator.openshift.io/version: 4.8.11
    tags: database,mysql,replication,mariadb,galera,odf,ocs
    template.openshift.io/bindable: "false"
  labels:
    samples.operator.openshift.io/managed: "true"
  name: mariadb-galera-persistent-storageclass-tony

parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: rails-mysql-persistent
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Maximum amount of memory the Rails container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MYSQL container can use.
  displayName: Memory Limit (MYSQL)
  name: MEMORY_MYSQL_LIMIT
  required: true
  value: 512Mi
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/tonyli71/rails-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the Rails service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: Environment under which the sample application will run. Could be set
    to production, development or test.
  displayName: Rails Environment
  name: RAILS_ENV
  required: true
  value: production
- displayName: Database Service Name for the MariaDB service
  name: DATABASE_SERVICE_NAME
  required: true
  value: galera
- name: GALERA_PETSET_NAME
  description: PetSet name
  value: mariadb-galera
- name: NUMBER_OF_GALERA_MEMBERS
  description: Number of Galera Nodes
  value: "3"
  required: true
- name: VOLUME_PV_NAME
  description: Volume PV basename. If the name is "datadir", it you need to create datadir-GALERA_PETSET_NAME-number
  value: datadir
  required: true
- name: VOLUME_CAPACITY
  description: Volume space available for data, e.g. 512Mi, 2Gi.
  required: true
  value: 5Gi
- name: DATABASE_USER
  description: The username that clients will use to connect to the server
  value: demouser
- name: MYSQL_DATABASE
  description: The name of the database that will be created and replicated
  value: userdb
- description: Storage Class used to provision Persistent Volume
  displayName: Volume Storage Class
  name: STORAGE_CLASS
  required: true
  value: ocs-storagecluster-ceph-mirror
- displayName: Database Password, The password for the root user
  value: redhat
  name: DATABASE_PASSWORD
- name: DATABASE_USER_PASSWORD
  description: The password for the DATABASE_USER
  value: redhat
- description: The application user that is used within the sample application to
    authorize access on pages.
  displayName: Application Username
  name: APPLICATION_USER
  required: true
  value: openshift
- description: The application password that is used within the sample application
    to authorize access on pages.
  displayName: Application Password
  name: APPLICATION_PASSWORD
  required: true
  value: secret
- description: Your secret key for verifying the integrity of signed cookies.
  displayName: Secret Key
  from: '[a-z0-9]{127}'
  generate: expression
  name: SECRET_KEY_BASE
- description: The custom RubyGems mirror URL
  displayName: Custom RubyGems Mirror URL
  name: RUBYGEM_MIRROR
- description: Peer DNS Ipaddr on Submariner 
  displayName: Peer DNS IP on Submariner
  name: PEER_DNS_IP
  value: ""

objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    application-password: ${APPLICATION_PASSWORD}
    application-user: ${APPLICATION_USER}
    database-password: ${DATABASE_PASSWORD}
    database-name: ${MYSQL_DATABASE}
    database-user: ${DATABASE_USER}
    database-user-password: ${DATABASE_USER_PASSWORD}
    keybase: ${SECRET_KEY_BASE}
    peer_dns_ip: ${PEER_DNS_IP}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: ${DATABASE_SERVICE_NAME}
    labels:
      app: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - port: 3306
      name: mysql
    clusterIP: None
    selector:
      app: ${DATABASE_SERVICE_NAME}
      
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}

- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      description: Defines how to deploy the database
    name: ${DATABASE_SERVICE_NAME}
  spec:
    serviceName: ${DATABASE_SERVICE_NAME}
    replicas: ${{NUMBER_OF_GALERA_MEMBERS}}
    podManagementPolicy: OrderedReady
    selector:
      name: ${DATABASE_SERVICE_NAME}
      matchLabels:
         app: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${DATABASE_SERVICE_NAME}
      spec:
        securityContext:
          privileged: true
        containers:
        - name: "${GALERA_PETSET_NAME}"              
          securityContext:
            privileged: true
          env:                
            - name: POD_NAMESPACE
              valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
            - name: PEER_DNS_IP
              valueFrom:
                secretKeyRef:
                  name: rails-mysql-persistent
                  key: peer_dns_ip
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${NAME}            
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-user-password
                  name: ${NAME}            
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${NAME}              
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${NAME}            
            - name: GALERA_PETSET_NAME
              value: "${GALERA_PETSET_NAME}"
          image: 'quay.io/tonyli71/mariadb-galera:latest'
          imagePullPolicy: Always
          triggers:
          - imageChangeParams:
              automatic: true
              containerNames:
              - ${GALERA_PETSET_NAME}
              from:
                kind: ImageStreamTag
                name: mariadb-galera:10.5
                namespace: ${NAMESPACE}
            type: ImageChange
          - type: ConfigChange
            restartPolicy: Always
            terminationGracePeriodSeconds: 30
            dnsPolicy: ClusterFirst
            schedulerName: default-scheduler          
          ports:
          - containerPort: 3306
            name: mysql
          - containerPort: 4444
            name: sst
          - containerPort: 4567
            name: replication
          - containerPort: 4568
            name: ist
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          resources:
            limits:
              memory: ${MEMORY_MYSQL_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql
            subPath: data
            name: ${DATABASE_SERVICE_NAME}
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: ${DATABASE_SERVICE_NAME}
        creationTimestamp: null
        labels:
          app: ${DATABASE_SERVICE_NAME}
          cp.cna.at/instance: ${NAME}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${VOLUME_CAPACITY}
        storageClassName: ${STORAGE_CLASS}
        volumeMode: Filesystem
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        partition: 0
    revisionHistoryLimit: 10

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit:
      script: bundle exec rake test
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: RUBYGEM_MIRROR
          value: ${RUBYGEM_MIRROR}
        from:
          kind: ImageStreamTag
          name: ruby:2.6
          namespace: ${NAMESPACE}
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      recreateParams:
        pre:
          execNewPod:
            command:
            - ./migrate-database.sh
            containerName: ${NAME}
          failurePolicy: Abort
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-user-password
                name: ${NAME}
          - name: SECRET_KEY_BASE
            valueFrom:
              secretKeyRef:
                key: keybase
                name: ${NAME}
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${NAME}            
          - name: APPLICATION_DOMAIN
            value: ${APPLICATION_DOMAIN}
          - name: APPLICATION_USER
            valueFrom:
              secretKeyRef:
                key: application-user
                name: ${NAME}
          - name: APPLICATION_PASSWORD
            valueFrom:
              secretKeyRef:
                key: application-password
                name: ${NAME}
          - name: RAILS_ENV
            value: ${RAILS_ENV}
          image: ' '
          livenessProbe:
            httpGet:
              path: /articles
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 3
          name: ${NAME}
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /articles
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange
